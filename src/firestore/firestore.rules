//auth

function isUserRegular(request) {
    return request.auth != null && request.auth.token.firebase.sign_in_provider != 'anonymous'
}

function isUserAnonymous(request) {
    return request.auth != null && request.auth.token.firebase.sign_in_provider == 'anonymous';
}

function isUserEmailVerified (request) {
    return isUserRegular(request) && request.auth.token.email_verified;
}

function isUserSignedIn(request) {
    return isUserEmailVerified(request) || isUserAnonymous(request)
}

//notes db

function hasUserAccessToNoteData(request, resource) {
    return request.auth != null && request.auth.uid in resource.data.coUsers;
}

function isUserNoteOwner(request, resource) {
    return request.auth != null && request.auth.uid == resource.data.userId;
}

function isNoteContentValid(request) {
    return request.resource.data.title is string &&
    request.resource.data.title.size() >= 0 &&
    request.resource.data.title.size() <= 1000 &&
    request.resource.data.body is string &&
    request.resource.data.body.size() >= 0 &&
    request.resource.data.body.size() <= 20000 &&
    request.resource.data.color is string &&
    request.resource.data.color.size() > 0 &&
    request.resource.data.color in ["default", "red", "yellow", "green", "blue", "purple", "pink", "grey"];
}

function isResourceValidToCreateNote(request) {
    return request.resource.data.id is string && 
    request.resource.data.id.size() > 0 &&
    isNoteContentValid(request) &&
    request.resource.data.date is string && 
    request.resource.data.date.size() > 0 &&
    request.resource.data.userId == request.auth.uid &&
    request.resource.data.coUsers is list && 
    request.auth.uid in request.resource.data.coUsers && 
    (isUserAnonymous(request) ? request.resource.data.coUsers.size() == 1 : true);

}

function isResourceValidToUpdateNote(request, resource) {
    return request.resource.data.id is string && 
    request.resource.data.id.size() > 0 &&
    request.resource.data.id == resource.data.id &&
    isNoteContentValid(request) &&
    request.resource.data.date is string && 
    request.resource.data.date.size() > 0 &&
    request.resource.data.userId == resource.data.userId &&
    request.resource.data.coUsers is list && 
    request.auth.uid in request.resource.data.coUsers && 
    (isUserAnonymous(request) ? (request.resource.data.coUsers.size() == 1 &&
    request.resource.data.coUsers == resource.data.coUsers) : true);
}

//user db

function isUserAccessingSelf (request, resource) {
    return request.auth.uid == resource.data.id;
}

function isResourceValidToCreateUser(request) {
    return request.resource.data.id is string &&
    request.resource.data.id.size() > 0 &&
    (isUserAnonymous(request) ? request.resource.data.email.size() == 0 : request.resource.data.email.size() > 0) &&
    request.resource.data.theme is string &&
    request.resource.data.theme.size() > 0 &&
    (request.resource.data.theme == "light" || request.resource.data.theme == "dark") &&
    request.resource.data.layout is string &&
    request.resource.data.layout.size() > 0 &&
    (request.resource.data.layout == "list" || request.resource.data.layout == "grid") &&
    request.resource.data.username is string &&
    (isUserAnonymous(request) ? request.resource.data.username == "guest" : 
    (request.resource.data.username.size() > 0 && request.resource.data.username.size() <= 17));
}

function isResourceValidToUpdateUser(request) {
    return request.resource.data.id is string &&
    request.resource.data.id.size() > 0 &&
    request.resource.data.id == resource.data.id &&
    request.resource.data.email is string &&
    request.resource.data.theme is string &&
    request.resource.data.theme.size() > 0 &&
    (request.resource.data.theme == "light" || request.resource.data.theme == "dark") &&
    request.resource.data.layout is string &&
    request.resource.data.layout.size() > 0 &&
    (request.resource.data.layout == "list" || request.resource.data.layout == "grid") &&
    request.resource.data.username is string &&
    (request.resource.data.username.size() > 0 && request.resource.data.username.size() <= 17);
}

//rules

service cloud.firestore {
    match /databases/{database}/documents {

        match /notes/{noteID} {
            //read, create, delete, update
            allow read: if (
                isUserSignedIn(request) &&
                hasUserAccessToNoteData(request, resource)
            );
            allow create: if (
                isUserSignedIn(request) &&
                isResourceValidToCreateNote(request)
            );
            allow delete: if (
                isUserSignedIn(request) &&
                hasUserAccessToNoteData(request, resource)
            );
            allow update: if (
                isUserSignedIn(request) &&
                isResourceValidToUpdateNote(request, resource)
            );
        }
        
        match /users/{userID} {
            //read, create, delete, update
            allow read: if isUserSignedIn(request);
            allow create: if (
                (isUserRegular(request) || isUserAnonymous(request)) && 
                isResourceValidToCreateUser(request)
            );
            allow delete: if isUserEmailVerified(request) && isUserAccessingSelf(request, resource);
            allow update: if (
                isUserSignedIn(request) &&
                isResourceValidToUpdateUser(request) &&
                isUserAccessingSelf(request, resource)
            );

        }

    }
}
